project(SGDNN CXX)

include(config.cmake)
set(SOC_CROSS_MODE $ENV{SOC_CROSS_MODE})
if(SOC_CROSS_MODE STREQUAL "ON")
    message(STATUS "SOC_CROSS_MODE is ON")
    if (BACKEND_SG2260)
        set(CMAKE_C_COMPILER $ENV{CROSS_TOOLCHAINS}/riscv64-linux-x86_64/bin/riscv64-unknown-linux-gnu-gcc)
        set(CMAKE_ASM_COMPILER $ENV{CROSS_TOOLCHAINS}/riscv64-linux-x86_64/bin/riscv64-unknown-linux-gnu-gcc)
        set(CMAKE_CXX_COMPILER $ENV{CROSS_TOOLCHAINS}/riscv64-linux-x86_64/bin/riscv64-unknown-linux-gnu-g++)
    else()
        set(CMAKE_C_COMPILER $ENV{CROSS_TOOLCHAINS}/gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu-gcc)
        set(CMAKE_ASM_COMPILER $ENV{CROSS_TOOLCHAINS}/gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu-gcc)
        set(CMAKE_CXX_COMPILER $ENV{CROSS_TOOLCHAINS}/gcc-arm-10.3-2021.07-x86_64-aarch64-none-linux-gnu/bin/aarch64-none-linux-gnu-g++)
    endif()
endif()
include_directories(${CMAKE_CURRENT_SOURCE_DIR}/include)
include_directories(${PROJECT_ROOT}/common/include)
include_directories(${PROJECT_SOURCE_DIR}/../third_party/firmware/include)

## runtime
include_directories(${RUNTIME_INCLUDE_PATH})
link_directories(${RUNTIME_LIB_PATH})

## kernel_module
include_directories(${CMAKE_BINARY_DIR}/firmware_core)

if (NOT DEFINED KERNEL_MODULE_PATH)
    message(FATAL_ERROR "${KERNEL_MODULE_PATH} Please specify -DKERNEL_MODULE_PATH=")
endif()
include(ResourceTools)
compile_binary_file(${KERNEL_MODULE_PATH} torch_tpu_kernel_data)

set(sgdnn_srcs ${CMAKE_CURRENT_SOURCE_DIR}/src/sgdnn.cpp $<TARGET_PROPERTY:torch_tpu_kernel_data,SOURCES>)

if(BACKEND_1684X)
  add_library(sgdnn ${sgdnn_srcs})
  target_link_libraries(sgdnn torch_tpu_kernel_data)
  target_link_libraries(sgdnn PUBLIC bmlib)
elseif(BACKEND_SG2260)
  list(APPEND sgdnn_srcs ${CMAKE_CURRENT_SOURCE_DIR}/src/tpukernel_launcher.cpp)
  add_library(sgdnn ${sgdnn_srcs})
  target_link_libraries(sgdnn torch_tpu_kernel_data)
  target_link_libraries(sgdnn PUBLIC tpuv7_rt)
endif()
